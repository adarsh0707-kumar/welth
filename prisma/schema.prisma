// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

/**
 * Prisma Schema for Wealth Management Application
 *
 * This schema defines the core database models: User, Account, Transaction, and Budget.
 * It also includes enums for account type, transaction type, recurring intervals, and transaction status.
 *
 * Generator:
 * - Prisma Client JS is used for database operations.
 * - Binary targets specified for native and common Linux distributions.
 *
 * Datasource:
 * - PostgreSQL is used as the database.
 * - `DATABASE_URL` for general access, `DIRECT_URL` for direct access.
 */

/**
 * User model
 *
 * Represents a user in the system.
 * - `clerkUserId` links the user to Clerk authentication.
 * - Relationships:
 *    - transactions: Transaction[]
 *    - accounts: Account[]
 *    - budgets: Budget[]
 */

model User{
  id String @id @default(uuid())
  clerkUserId String @unique
  email String @unique
  name String? 
  imageUrl String?
  transactions Transaction[]
  accounts Account[]
  budgets Budget[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}


/**
 * Account model
 *
 * Represents a financial account (e.g., current or savings account) for a user.
 * - `type` uses the AccountType enum
 * - `isDefault` determines if this account is default for transactions
 */

model Account{
  id String @id @default(uuid())
  name String
  type AccountType
  balance Decimal @default(0)
  isDefault Boolean @default(false)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("accounts")
}

enum AccountType{
  CURRENT
  SAVINGS
}

/**
 * Transaction model
 *
 * Represents a single financial transaction.
 * - `type` specifies if it's INCOME or EXPENSE
 * - `isRecurring` indicates whether it repeats
 * - `recurringInterval` and `nextRecurringDate` handle recurring logic
 * - `status` tracks transaction completion
 */


model Transaction{
  id String @id @default(uuid())
  type TransactionType
  amount Decimal
  description String?
  date DateTime
  category  String
  receiptUrl String?
  isRecurring Boolean @default(false)
  recurringInterval RecurringInterval?
  nextRecurringDate DateTime?
  lastProcessed DateTime?
  status TransactionStatus @default(COMPLETED)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId String
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

enum TransactionType{
  INCOME
  EXPENSE
}

enum RecurringInterval{
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TransactionStatus{
  PENDING
  COMPLETED
  FAILED
}

/**
 * Budget model
 *
 * Represents a monthly budget for a user.
 * - `lastAlertSent` tracks the last time a budget alert was sent
 * - One-to-one relationship with User
 */

model Budget{
  id String @id @default(uuid())
  amount Decimal
  lastAlertSent DateTime? 
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("budgets")
} 

